// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// murmur3hash
SEXP murmur3hash(SEXP x);
RcppExport SEXP _mlvocab_murmur3hash(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(murmur3hash(x));
    return rcpp_result_gen;
END_RCPP
}
// C_vocab
DataFrame C_vocab(const ListOf<const CharacterVector>& corpus, const DataFrame& oldvocab);
RcppExport SEXP _mlvocab_C_vocab(SEXP corpusSEXP, SEXP oldvocabSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const ListOf<const CharacterVector>& >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type oldvocab(oldvocabSEXP);
    rcpp_result_gen = Rcpp::wrap(C_vocab(corpus, oldvocab));
    return rcpp_result_gen;
END_RCPP
}
// C_embed_vocab
NumericMatrix C_embed_vocab(const DataFrame& vocabdf, NumericMatrix& embeddings, bool by_row, int unknown_buckets, int min_to_average);
RcppExport SEXP _mlvocab_C_embed_vocab(SEXP vocabdfSEXP, SEXP embeddingsSEXP, SEXP by_rowSEXP, SEXP unknown_bucketsSEXP, SEXP min_to_averageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type vocabdf(vocabdfSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type embeddings(embeddingsSEXP);
    Rcpp::traits::input_parameter< bool >::type by_row(by_rowSEXP);
    Rcpp::traits::input_parameter< int >::type unknown_buckets(unknown_bucketsSEXP);
    Rcpp::traits::input_parameter< int >::type min_to_average(min_to_averageSEXP);
    rcpp_result_gen = Rcpp::wrap(C_embed_vocab(vocabdf, embeddings, by_row, unknown_buckets, min_to_average));
    return rcpp_result_gen;
END_RCPP
}
// C_corpus2ixseq
List C_corpus2ixseq(const ListOf<const CharacterVector>& corpus, const DataFrame& vocabdf, bool keep_unknown, int unknown_buckets, bool reverse);
RcppExport SEXP _mlvocab_C_corpus2ixseq(SEXP corpusSEXP, SEXP vocabdfSEXP, SEXP keep_unknownSEXP, SEXP unknown_bucketsSEXP, SEXP reverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const ListOf<const CharacterVector>& >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type vocabdf(vocabdfSEXP);
    Rcpp::traits::input_parameter< bool >::type keep_unknown(keep_unknownSEXP);
    Rcpp::traits::input_parameter< int >::type unknown_buckets(unknown_bucketsSEXP);
    Rcpp::traits::input_parameter< bool >::type reverse(reverseSEXP);
    rcpp_result_gen = Rcpp::wrap(C_corpus2ixseq(corpus, vocabdf, keep_unknown, unknown_buckets, reverse));
    return rcpp_result_gen;
END_RCPP
}
// C_corpus2ixmat
IntegerMatrix C_corpus2ixmat(const ListOf<const CharacterVector>& corpus, const DataFrame& vocabdf, int maxlen, bool pad_right, bool trunc_right, bool keep_unknown, int unknown_buckets, bool reverse);
RcppExport SEXP _mlvocab_C_corpus2ixmat(SEXP corpusSEXP, SEXP vocabdfSEXP, SEXP maxlenSEXP, SEXP pad_rightSEXP, SEXP trunc_rightSEXP, SEXP keep_unknownSEXP, SEXP unknown_bucketsSEXP, SEXP reverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const ListOf<const CharacterVector>& >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type vocabdf(vocabdfSEXP);
    Rcpp::traits::input_parameter< int >::type maxlen(maxlenSEXP);
    Rcpp::traits::input_parameter< bool >::type pad_right(pad_rightSEXP);
    Rcpp::traits::input_parameter< bool >::type trunc_right(trunc_rightSEXP);
    Rcpp::traits::input_parameter< bool >::type keep_unknown(keep_unknownSEXP);
    Rcpp::traits::input_parameter< int >::type unknown_buckets(unknown_bucketsSEXP);
    Rcpp::traits::input_parameter< bool >::type reverse(reverseSEXP);
    rcpp_result_gen = Rcpp::wrap(C_corpus2ixmat(corpus, vocabdf, maxlen, pad_right, trunc_right, keep_unknown, unknown_buckets, reverse));
    return rcpp_result_gen;
END_RCPP
}
// C_dtm
S4 C_dtm(const ListOf<CharacterVector>& corpus, const DataFrame& vocabdf, int unknown_buckets, std::string output);
RcppExport SEXP _mlvocab_C_dtm(SEXP corpusSEXP, SEXP vocabdfSEXP, SEXP unknown_bucketsSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const ListOf<CharacterVector>& >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type vocabdf(vocabdfSEXP);
    Rcpp::traits::input_parameter< int >::type unknown_buckets(unknown_bucketsSEXP);
    Rcpp::traits::input_parameter< std::string >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(C_dtm(corpus, vocabdf, unknown_buckets, output));
    return rcpp_result_gen;
END_RCPP
}
// C_tdm
S4 C_tdm(const ListOf<CharacterVector>& corpus, const DataFrame& vocabdf, int unknown_buckets, std::string output);
RcppExport SEXP _mlvocab_C_tdm(SEXP corpusSEXP, SEXP vocabdfSEXP, SEXP unknown_bucketsSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const ListOf<CharacterVector>& >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type vocabdf(vocabdfSEXP);
    Rcpp::traits::input_parameter< int >::type unknown_buckets(unknown_bucketsSEXP);
    Rcpp::traits::input_parameter< std::string >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(C_tdm(corpus, vocabdf, unknown_buckets, output));
    return rcpp_result_gen;
END_RCPP
}
// C_is_ascii
LogicalVector C_is_ascii(const CharacterVector& vec);
RcppExport SEXP _mlvocab_C_is_ascii(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(C_is_ascii(vec));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mlvocab_murmur3hash", (DL_FUNC) &_mlvocab_murmur3hash, 1},
    {"_mlvocab_C_vocab", (DL_FUNC) &_mlvocab_C_vocab, 2},
    {"_mlvocab_C_embed_vocab", (DL_FUNC) &_mlvocab_C_embed_vocab, 5},
    {"_mlvocab_C_corpus2ixseq", (DL_FUNC) &_mlvocab_C_corpus2ixseq, 5},
    {"_mlvocab_C_corpus2ixmat", (DL_FUNC) &_mlvocab_C_corpus2ixmat, 8},
    {"_mlvocab_C_dtm", (DL_FUNC) &_mlvocab_C_dtm, 4},
    {"_mlvocab_C_tdm", (DL_FUNC) &_mlvocab_C_tdm, 4},
    {"_mlvocab_C_is_ascii", (DL_FUNC) &_mlvocab_C_is_ascii, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_mlvocab(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
